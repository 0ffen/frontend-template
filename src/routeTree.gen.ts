/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './_app/__root'
import { Route as Char123LangChar125PageRouteImport } from './_app/{-$lang}/page'
import { Route as Char123LangChar125UserLayoutRouteImport } from './_app/{-$lang}/user/layout'
import { Route as Char123LangChar125UserPageRouteImport } from './_app/{-$lang}/user/page'
import { Route as Char123LangChar125UserIdRouteImport } from './_app/{-$lang}/user/$id'
import { Route as Char123LangChar125UserIdEditRouteImport } from './_app/{-$lang}/user/$id_.edit'

const Char123LangChar125PageRoute = Char123LangChar125PageRouteImport.update({
  id: '/{-$lang}/',
  path: '/{-$lang}/',
  getParentRoute: () => rootRouteImport,
} as any)
const Char123LangChar125UserLayoutRoute =
  Char123LangChar125UserLayoutRouteImport.update({
    id: '/{-$lang}/user',
    path: '/{-$lang}/user',
    getParentRoute: () => rootRouteImport,
  } as any)
const Char123LangChar125UserPageRoute =
  Char123LangChar125UserPageRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => Char123LangChar125UserLayoutRoute,
  } as any)
const Char123LangChar125UserIdRoute =
  Char123LangChar125UserIdRouteImport.update({
    id: '/$id',
    path: '/$id',
    getParentRoute: () => Char123LangChar125UserLayoutRoute,
  } as any)
const Char123LangChar125UserIdEditRoute =
  Char123LangChar125UserIdEditRouteImport.update({
    id: '/$id_/edit',
    path: '/$id/edit',
    getParentRoute: () => Char123LangChar125UserLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/{-$lang}/user': typeof Char123LangChar125UserLayoutRouteWithChildren
  '/{-$lang}': typeof Char123LangChar125PageRoute
  '/{-$lang}/user/$id': typeof Char123LangChar125UserIdRoute
  '/{-$lang}/user/': typeof Char123LangChar125UserPageRoute
  '/{-$lang}/user/$id/edit': typeof Char123LangChar125UserIdEditRoute
}
export interface FileRoutesByTo {
  '/{-$lang}': typeof Char123LangChar125PageRoute
  '/{-$lang}/user/$id': typeof Char123LangChar125UserIdRoute
  '/{-$lang}/user': typeof Char123LangChar125UserPageRoute
  '/{-$lang}/user/$id/edit': typeof Char123LangChar125UserIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/{-$lang}/user': typeof Char123LangChar125UserLayoutRouteWithChildren
  '/{-$lang}/': typeof Char123LangChar125PageRoute
  '/{-$lang}/user/$id': typeof Char123LangChar125UserIdRoute
  '/{-$lang}/user/': typeof Char123LangChar125UserPageRoute
  '/{-$lang}/user/$id_/edit': typeof Char123LangChar125UserIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/{-$lang}/user'
    | '/{-$lang}'
    | '/{-$lang}/user/$id'
    | '/{-$lang}/user/'
    | '/{-$lang}/user/$id/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/{-$lang}'
    | '/{-$lang}/user/$id'
    | '/{-$lang}/user'
    | '/{-$lang}/user/$id/edit'
  id:
    | '__root__'
    | '/{-$lang}/user'
    | '/{-$lang}/'
    | '/{-$lang}/user/$id'
    | '/{-$lang}/user/'
    | '/{-$lang}/user/$id_/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  Char123LangChar125UserLayoutRoute: typeof Char123LangChar125UserLayoutRouteWithChildren
  Char123LangChar125PageRoute: typeof Char123LangChar125PageRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/{-$lang}/': {
      id: '/{-$lang}/'
      path: '/{-$lang}'
      fullPath: '/{-$lang}'
      preLoaderRoute: typeof Char123LangChar125PageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/{-$lang}/user': {
      id: '/{-$lang}/user'
      path: '/{-$lang}/user'
      fullPath: '/{-$lang}/user'
      preLoaderRoute: typeof Char123LangChar125UserLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/{-$lang}/user/': {
      id: '/{-$lang}/user/'
      path: '/'
      fullPath: '/{-$lang}/user/'
      preLoaderRoute: typeof Char123LangChar125UserPageRouteImport
      parentRoute: typeof Char123LangChar125UserLayoutRoute
    }
    '/{-$lang}/user/$id': {
      id: '/{-$lang}/user/$id'
      path: '/$id'
      fullPath: '/{-$lang}/user/$id'
      preLoaderRoute: typeof Char123LangChar125UserIdRouteImport
      parentRoute: typeof Char123LangChar125UserLayoutRoute
    }
    '/{-$lang}/user/$id_/edit': {
      id: '/{-$lang}/user/$id_/edit'
      path: '/$id/edit'
      fullPath: '/{-$lang}/user/$id/edit'
      preLoaderRoute: typeof Char123LangChar125UserIdEditRouteImport
      parentRoute: typeof Char123LangChar125UserLayoutRoute
    }
  }
}

interface Char123LangChar125UserLayoutRouteChildren {
  Char123LangChar125UserIdRoute: typeof Char123LangChar125UserIdRoute
  Char123LangChar125UserPageRoute: typeof Char123LangChar125UserPageRoute
  Char123LangChar125UserIdEditRoute: typeof Char123LangChar125UserIdEditRoute
}

const Char123LangChar125UserLayoutRouteChildren: Char123LangChar125UserLayoutRouteChildren =
  {
    Char123LangChar125UserIdRoute: Char123LangChar125UserIdRoute,
    Char123LangChar125UserPageRoute: Char123LangChar125UserPageRoute,
    Char123LangChar125UserIdEditRoute: Char123LangChar125UserIdEditRoute,
  }

const Char123LangChar125UserLayoutRouteWithChildren =
  Char123LangChar125UserLayoutRoute._addFileChildren(
    Char123LangChar125UserLayoutRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  Char123LangChar125UserLayoutRoute:
    Char123LangChar125UserLayoutRouteWithChildren,
  Char123LangChar125PageRoute: Char123LangChar125PageRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
