/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './_app/__root'
import { Route as UserLayoutRouteImport } from './_app/user/layout'
import { Route as PageRouteImport } from './_app/page'
import { Route as UserPageRouteImport } from './_app/user/page'
import { Route as UserIdRouteImport } from './_app/user/$id'
import { Route as UserIdEditRouteImport } from './_app/user/$id_.edit'

const UserLayoutRoute = UserLayoutRouteImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => rootRouteImport,
} as any)
const PageRoute = PageRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UserPageRoute = UserPageRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UserLayoutRoute,
} as any)
const UserIdRoute = UserIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => UserLayoutRoute,
} as any)
const UserIdEditRoute = UserIdEditRouteImport.update({
  id: '/$id_/edit',
  path: '/$id/edit',
  getParentRoute: () => UserLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof PageRoute
  '/user': typeof UserLayoutRouteWithChildren
  '/user/$id': typeof UserIdRoute
  '/user/': typeof UserPageRoute
  '/user/$id/edit': typeof UserIdEditRoute
}
export interface FileRoutesByTo {
  '/': typeof PageRoute
  '/user/$id': typeof UserIdRoute
  '/user': typeof UserPageRoute
  '/user/$id/edit': typeof UserIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof PageRoute
  '/user': typeof UserLayoutRouteWithChildren
  '/user/$id': typeof UserIdRoute
  '/user/': typeof UserPageRoute
  '/user/$id_/edit': typeof UserIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/user' | '/user/$id' | '/user/' | '/user/$id/edit'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/user/$id' | '/user' | '/user/$id/edit'
  id: '__root__' | '/' | '/user' | '/user/$id' | '/user/' | '/user/$id_/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  PageRoute: typeof PageRoute
  UserLayoutRoute: typeof UserLayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/user': {
      id: '/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/user/': {
      id: '/user/'
      path: '/'
      fullPath: '/user/'
      preLoaderRoute: typeof UserPageRouteImport
      parentRoute: typeof UserLayoutRoute
    }
    '/user/$id': {
      id: '/user/$id'
      path: '/$id'
      fullPath: '/user/$id'
      preLoaderRoute: typeof UserIdRouteImport
      parentRoute: typeof UserLayoutRoute
    }
    '/user/$id_/edit': {
      id: '/user/$id_/edit'
      path: '/$id/edit'
      fullPath: '/user/$id/edit'
      preLoaderRoute: typeof UserIdEditRouteImport
      parentRoute: typeof UserLayoutRoute
    }
  }
}

interface UserLayoutRouteChildren {
  UserIdRoute: typeof UserIdRoute
  UserPageRoute: typeof UserPageRoute
  UserIdEditRoute: typeof UserIdEditRoute
}

const UserLayoutRouteChildren: UserLayoutRouteChildren = {
  UserIdRoute: UserIdRoute,
  UserPageRoute: UserPageRoute,
  UserIdEditRoute: UserIdEditRoute,
}

const UserLayoutRouteWithChildren = UserLayoutRoute._addFileChildren(
  UserLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  PageRoute: PageRoute,
  UserLayoutRoute: UserLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
